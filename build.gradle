plugins {
    id 'java'
    id 'application'
    id 'distribution'
    id "org.openjfx.javafxplugin" version "0.1.0"
    id "de.undercouch.download" version "5.5.0"
    id "io.freefair.lombok" version "8.3"
    id "com.github.spotbugs" version "5.1.3"
    id "com.github.hierynomus.license-report" version "0.16.1"
    id 'net.researchgate.release' version '3.0.2'
}

group 'main'
ext.javafxVersion = "20.0.2"
startScripts.enabled = false

application {
    mainClass = 'application.Main'
}

javafx {
    version = javafxVersion
    modules = ['javafx.base', 'javafx.controls', 'javafx.swing', 'javafx.media', 'javafx.web']
}

ext {
    Download = de.undercouch.gradle.tasks.download.Download
    download = download
}

apply from: "${rootDir}/gradle/package.gradle"
apply from: "${rootDir}/gradle/jre.gradle"
apply from: "${rootDir}/gradle/drivers.gradle"
apply from: "${rootDir}/gradle/installer.gradle"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url = 'https://jitpack.io'
    }
}

dependencies {
    implementation 'com.github.GazePlay:TobiiStreamEngineForJava:5.0'
    implementation 'org.projectlombok:lombok:1.18.28'
    implementation 'org.slf4j:slf4j-simple:2.0.9'
    implementation 'org.json:json:20230618'
    implementation 'com.google.code.gson:gson:2.10.1'


    testImplementation 'org.slf4j:slf4j-simple:2.0.9'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

spotbugs {
    excludeFilter = file("spotbugs-exclude.xml")
}

test {
    useJUnitPlatform()
}

jar {
    enabled=true
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'application.Main',
                "Class-Path": configurations.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

distributions {
    windows {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/interAACtionGaze-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows") {
                into 'lib/jre'
            }
        }
    }

    linux {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/interAACtionGaze-linux.sh") {
                into 'bin'
            }
            from("build/bin/interAACtionGaze-linux-calibration.sh") {
                into 'bin'
            }
            from("build/jre/linux-x64") {
                into 'lib/jre'
            }
            from("build/tobiiDrivers") {
                into 'tobiiDrivers'
            }
        }
    }

    macos {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/interAACtionGaze-macos.sh") {
                into 'bin'
            }
            from("build/jre/macos") {
                into 'lib/jre'
            }
        }
    }
}

downloadLicenses {
    includeProjectDependencies = true
    dependencyConfiguration = 'compile'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.jar.dependsOn('createLicence')

task createLicence(dependsOn: ['processResources'], type: Copy, group: 'license') {
    from("${rootDir}/gradle/templates/licence.txt")
    expand([
            "date"   : new Date().format('yyyy-MM-dd')
    ])
    into("${processResources.destinationDir}/data/common")
}

task('downloadAndExtractLinuxDependecies').dependsOn('downloadAndExtractLinuxJREwithLibavPlugin', 'downloadAndExtractTobiiDriversForLinux')

macosDistZip{
    dependsOn(downloadAndExtractMacosJRE)
    dependsOn(scriptsForRelease)
}

macosDistTar {
    dependsOn(downloadAndExtractMacosJRE)
    dependsOn(scriptsForRelease)
}

windowsDistZip {
    dependsOn(downloadAndExtractWindowsJRE)
    dependsOn(scriptsForRelease)
}

windowsDistTar {
    dependsOn(downloadAndExtractWindowsJRE)
    dependsOn(scriptsForRelease)
}

linuxDistZip {
    dependsOn(downloadAndExtractLinuxDependecies)
    dependsOn(scriptsForRelease)
}

linuxDistTar {
    dependsOn(downloadAndExtractLinuxDependecies)
    dependsOn(scriptsForRelease)
}

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

distZip {
    duplicatesStrategy = 'exclude'
}

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
}
