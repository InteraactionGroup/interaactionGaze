buildscript {
    group = 'com.github.InteraactionGroup'
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'application'
    id 'distribution'
    id 'jacoco'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'io.freefair.lombok' version '8.3'
    id 'com.github.hierynomus.license-report' version '0.15.0'
    id "com.github.spotbugs" version "5.1.3"
    id 'net.researchgate.release' version '2.6.0'
    id "de.undercouch.download" version '4.0.4'
}

ext.javafxVersion = "21"
// Make it available everywhere via the project ext:
ext {
    Download = de.undercouch.gradle.tasks.download.Download
    download = download
}

apply from: "${rootDir}/gradle/package.gradle"
apply from: "${rootDir}/gradle/jre.gradle"
apply from: "${rootDir}/gradle/drivers.gradle"
apply from: "${rootDir}/gradle/installer.gradle"

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.swing', 'javafx.media', 'javafx.web']
}

apply plugin: 'distribution'

sourceSets {
    main {
        resources {
            srcDirs "src/resources"
        }
    }
}

allprojects {
    group = 'com.github.interaactionGaze'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            url = 'https://jitpack.io'
        }
    }
}


subprojects {
    apply plugin: 'distribution'

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    apply from: "${rootDir}/gradle/integration.gradle"

    javafx {
        version = javafxVersion
        modules = ['javafx.controls', 'javafx.swing', 'javafx.media', 'javafx.web']
    }

    spotbugs {
        excludeFilter.fileValue(file("spotbugs-exclude.xml"))
    }

    downloadLicenses {
        dependencyConfiguration = 'compileClasspath'
        includeProjectDependencies = true
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
        testImplementation "org.testfx:testfx-core:4.0.16-alpha"
        testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
        testImplementation "org.testfx:openjfx-monocle:jdk-11+26"
        testImplementation "org.jmockit:jmockit:1.49"
        testImplementation "org.mockito:mockito-core:3.12.+"
    }

    sourceCompatibility = '11'

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
        if (project.hasProperty('excludeTests')) {
            exclude project.property('excludeTests')
        }
    }

    tasks.withType(Test) {
        maxHeapSize = "3g"
    }
}


dependencies {
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'com.github.GazePlay:TobiiStreamEngineForJava:5.0'
    implementation 'com.google.code.gson:gson:2.8.1'
    implementation 'org.rxtx:rxtx:2.1.7'
    implementation 'ch.qos.logback:logback-classic:1.2.1'
    implementation 'ch.qos.logback:logback-core:1.2.1'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'uk.org.lidalia:sysout-over-slf4j:1.0.2'
    implementation 'javax.media:jmf:2.1.1e'
    implementation 'org.json:json:20090211'
    implementation 'ws.schild:jave-all-deps:2.5.0'
    implementation 'ws.schild:jave-core:2.5.0'
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
}

jar {
    enabled=true
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'application.Main',
                "Class-Path": configurations.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

distributions {
    noJRE {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin") {
                into 'bin'
            }
        }
    }

    windows {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/interAACtionGaze-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows") {
                into 'lib/jre'
            }
        }
    }

    linux {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/interAACtionGaze-linux.sh") {
                into 'bin'
            }
            from("build/bin/interAACtionGaze-linux-calibration.sh") {
                into 'bin'
            }
            from("build/jre/linux-x64") {
                into 'lib/jre'
            }
            from("build/tobiiDrivers") {
                into 'tobiiDrivers'
            }
        }
    }

    macos {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/interAACtionGaze-macos.sh") {
                into 'bin'
            }
            from("build/jre/macos") {
                into 'lib/jre'
            }
        }
    }
}



tasks.jar.dependsOn('createLicence')

task createLicence(dependsOn: ['processResources'], type: Copy, group: 'license') {
    from("${rootDir}/gradle/templates/licence.txt")
    expand([
            "date"   : new Date().format('yyyy-MM-dd')
    ])
    into("${processResources.destinationDir}/data/common")
}

task('downloadAndExtractLinuxDependecies').dependsOn('downloadAndExtractLinuxJREwithLibavPlugin', 'downloadAndExtractTobiiDriversForLinux')

macosDistTar.dependsOn(downloadAndExtractMacosJRE)
windowsDistZip.dependsOn(downloadAndExtractWindowsJRE)
linuxDistTar.dependsOn(downloadAndExtractLinuxDependecies)

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

distZip {
    duplicatesStrategy = 'exclude'
}

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
}

mainClassName = 'application.Main'

defaultTasks 'clean', 'build'
startScripts.enabled = false

afterReleaseBuild.dependsOn generateWindowsInstallerInDocker
