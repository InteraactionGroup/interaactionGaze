
buildscript {
    group = 'com.github.InteraactionGroup'
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'application'
    id 'distribution'
    id 'de.undercouch.download' version '3.2.0'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'io.freefair.lombok' version '4.1.4'
}

ext.javafxVersion = "11.0.2"

apply from: "${rootDir}/gradle/package.gradle"
apply from: "${rootDir}/gradle/installer.gradle"
apply from: "${rootDir}/gradle/jre.gradle"
apply from: "${rootDir}/gradle/drivers.gradle"

// Make it available everywhere via the project ext:
ext {
    Download = de.undercouch.gradle.tasks.download.Download
    download = download
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.swing', 'javafx.media', 'javafx.web']
}

apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'distribution'


sourceSets {
    main {
        resources {
            srcDirs "src/resources"
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'main.Main'
    }
}

allprojects {
    group = 'com.github.interaactionGaze'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            url = 'https://jitpack.io'
        }
    }
}

dependencies {
    compile 'com.github.GazePlay:TobiiStreamEngineForJava:5.0'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'org.rxtx:rxtx:2.1.7'
    compile 'ch.qos.logback:logback-classic:1.2.1'
    compile 'ch.qos.logback:logback-core:1.2.1'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'uk.org.lidalia:sysout-over-slf4j:1.0.2'
    compile 'javax.media:jmf:2.1.1e'
    implementation 'org.json:json:20090211'
    compile 'ws.schild:jave-all-deps:2.5.0'
    compile 'ws.schild:jave-core:2.5.0'
    runtime 'org.slf4j:jcl-over-slf4j:1.7.25'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.25'
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
}

distributions {
    noJRE {
        setDistributionBaseName "${project.name}-no-jre"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin") {
                into 'bin'
            }
        }
    }

    windows {
        setDistributionBaseName "${project.name}-windows-x64"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows-x64") {
                into 'lib/jre'
            }
        }
    }

    linux {
        setDistributionBaseName "${project.name}-linux-x64"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-linux.sh") {
                into 'bin'
            }
            from("build/jre/linux-x64") {
                into 'lib/jre'
            }
            from("build/tobiiDrivers") {
                into 'tobiiDrivers'
            }
        }
    }

    macos {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-macos.sh") {
                into 'bin'
            }
            from("build/jre/macos") {
                into 'lib/jre'
            }
        }
    }
}

task('downloadAndExtractLinuxDependecies').dependsOn('downloadAndExtractLinuxJREwithLibavPlugin', 'downloadAndExtractTobiiDriversForLinux')

macosDistTar.dependsOn(downloadAndExtractMacosJRE)
windowsDistZip.dependsOn(downloadAndExtractWindowsJRE)
linuxDistTar.dependsOn(downloadAndExtractLinuxDependecies)

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

distZip {
    duplicatesStrategy = 'exclude'
}
[bootJar, bootDistTar, bootDistZip]*.enabled = false

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
    versionPropertyFile = 'gradle.properties'
}

mainClassName = 'net.gazeplay.GazePlayLauncher'

defaultTasks 'clean', 'build', 'checkPMDReport'
startScripts.enabled = false

afterReleaseBuild.dependsOn generateWindowsInstallerInDocker
